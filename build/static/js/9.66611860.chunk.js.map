{"version":3,"sources":["components/API/index.js","components/choropleth.jsx","components/graph.jsx","components/statepicker.jsx","components/stateTable.jsx","components/home.jsx"],"names":["url2","countries","a","axios","get","data","console","log","fetchTotal","country","changeableUrl","updated","cases","todayCases","deaths","todayDeaths","recovered","active","critical","fetchDailyData","fetchChAusCan","timeline","indianstates","INDIA_TOPO_JSON","require","PROJECTION_CONFIG","scale","center","Choropleth","colorLow","colorHigh","type","fill","COLOR_RANGE","geographyStyle","hover","transition","strokeWidth","outline","pressed","useState","tooltipContent","setTooltipContent","colorScale","String","Math","ceil","reduce","max","item","value","scaleLog","domain","map","d","range","onMouseEnter","geo","current","properties","st_nm","commaSeperated","Number","onMouseLeave","className","multiline","projectionConfig","projection","width","height","data-tip","geography","geographies","find","s","id","key","rsmKey","style","stroke","Graph","props","state","data2","tests","isLoaded","toggleActive","clickConfirmedMap","clickActiveMap","clickRecoveredMap","clickDeceasedMap","beginning","twoWeeks","oneMonth","onToggle","bind","onClickConfirmed","onClickActive","onClickRecovered","onClickDeceased","handleBeginning","handleTwoWeeks","handleOneMonth","this","setState","fetch","then","res","json","cases_time_series","statewise","tested","graphClass","window","innerWidth","dailyConfirmed","push","dailyconfirmed","dailyActive","dailyrecovered","dailydeceased","dailyActiveJson","dailyactive","date","dailyRecovered","dailyDeceased","totalConfirmed","totalconfirmed","totalActive","totalrecovered","totaldeceased","totalActiveJson","totalactive","totalRecovered","totalDeceased","confirmedStatesData","statecode","confirmed","activeStatesData","recoveredStatesData","deceasedStatesData","grandTotal","lastUpdatedTime","timeSince","Date","lastupdatedtime","split","join","getTime","Fragment","justifyContent","marginBottom","textAlign","animationDelay","fontSize","color","onClick","background","deltaconfirmed","size","verticalAlign","deltarecovered","deltadeaths","cursor","slice","length","ReactGa","event","category","action","wordBreak","wordWrap","Component","StatePicker","handleStateChange","fetchedStates","setStates","useEffect","fetchData","onChange","e","target","selected","disabled","i","StateTable","requiredStateData","stateData","districtData","requiredData","requiredState","back","cross","sortConfirmed","sortActive","sortRecovered","sortDeceased","sortOrder","onBack","onSortConfirmed","onSortActive","onSortRecovered","onSortDeceased","handleSortOrder","sort","x","y","deceased","useStylesBootstrap","makeStyles","theme","arrow","palette","common","black","tooltip","backgroundColor","BootstrapTooltip","classes","Tooltip","disableTouchListener","alignItems","alignContent","minWidth","tableLayout","marginTop","align","district","borderLeftWidth","borderStyle","notes","title","parse","deltaType","delta","abs","Home","Helmet"],"mappings":"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","file":"static/js/9.66611860.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst url1 = \"https://corona.lmao.ninja/v2/countries\";\r\nconst url2 = \"https://corona.lmao.ninja/v2\";\r\nconst url3 = \"https://corona.lmao.ninja/v2/historical/all/?lastdays=all\";\r\nconst url4 = \"https://api.covid19india.org/v2/state_district_wise.json\";\r\nconst url5 = \"https://api.covid19india.org/state_test_data.json\";\r\nconst url6 = \"https://corona.lmao.ninja/v2/all\";\r\nconst url7 = \"https://api.covid19india.org/districts_daily.json\";\r\n\r\nexport const countries = async () => {\r\n  try {\r\n    const { data } = await axios.get(url1);\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchTotal = async (country) => {\r\n  let changeableUrl = url2;\r\n  if (country) {\r\n    changeableUrl = `${url2}/countries/${country}`;\r\n  } else {\r\n    changeableUrl = `${url2}/all`;\r\n  }\r\n  try {\r\n    const {\r\n      data: {\r\n        updated,\r\n        cases,\r\n        todayCases,\r\n        deaths,\r\n        todayDeaths,\r\n        recovered,\r\n        active,\r\n        critical,\r\n      },\r\n    } = await axios.get(changeableUrl);\r\n\r\n    return {\r\n      updated,\r\n      cases,\r\n      todayCases,\r\n      deaths,\r\n      todayDeaths,\r\n      recovered,\r\n      active,\r\n      critical,\r\n    };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async (country) => {\r\n  let changeableUrl = url3;\r\n  if (country) {\r\n    changeableUrl = `${url2}/historical?lastdays=all`;\r\n    try {\r\n      const data = await axios.get(changeableUrl);\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  } else {\r\n    try {\r\n      const {\r\n        data: { cases, recovered, deaths },\r\n      } = await axios.get(changeableUrl);\r\n\r\n      return { cases, recovered, deaths };\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n};\r\n\r\nexport const fetchChAusCan = async (country) => {\r\n  try {\r\n    const {\r\n      data: {\r\n        timeline: { cases, recovered, deaths },\r\n      },\r\n    } = await axios.get(`${url2}/historical/${country}?lastdays=all`);\r\n\r\n    return { cases, recovered, deaths };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const indianstates = async () => {\r\n  try {\r\n    const { data } = await axios.get(url4);\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const statesTestData = async () => {\r\n  try {\r\n    const {\r\n      data: { states_tested_data },\r\n    } = await axios.get(url5);\r\n    return states_tested_data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const worldTotalData = async () => {\r\n  try {\r\n    const {\r\n      data: { cases, todayCases, deaths, todayDeaths, recovered, active },\r\n    } = await axios.get(url6);\r\n    return { cases, todayCases, deaths, todayDeaths, recovered, active };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const districtsDaily = async () => {\r\n  try {\r\n    const {\r\n      data: { districtsDaily },\r\n    } = await axios.get(url7);\r\n    return districtsDaily;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { ComposableMap, Geographies, Geography } from \"react-simple-maps\";\r\nimport { scaleLog } from \"d3-scale\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport { commaSeperated } from \"../utils/common-functions\";\r\n\r\nconst INDIA_TOPO_JSON = require(\"../india.topo.json\");\r\n\r\nconst PROJECTION_CONFIG = {\r\n  scale: 375,\r\n  center: [82.8, 22.5937], // always in [East Latitude, North Longitude]\r\n};\r\n\r\nconst Choropleth = ({ data, colorLow, colorHigh, fill, type }) => {\r\n  const COLOR_RANGE = [colorHigh, colorLow];\r\n\r\n  const geographyStyle = {\r\n    hover: {\r\n      transition: \"all 250ms\",\r\n      strokeWidth: 0.6,\r\n      outline: \"#b13f2b\",\r\n    },\r\n    pressed: {\r\n      outline: \"#b13f2b\",\r\n    },\r\n  };\r\n  const [tooltipContent, setTooltipContent] = useState(\"\");\r\n\r\n  const gradientData = {\r\n    fromColor: \"rgb(240,240,240)\",\r\n    toColor: COLOR_RANGE[0],\r\n    min: 0,\r\n    max:\r\n      String(\r\n        Math.ceil(\r\n          data.reduce((max, item) => (item.value > max ? item.value : max), 0) /\r\n            100\r\n        ) / 10\r\n      ) + \"K\",\r\n  };\r\n\r\n  const colorScale = scaleLog()\r\n    .domain(data.map((d) => d.value))\r\n    .range(COLOR_RANGE);\r\n\r\n  const onMouseEnter = (geo, current = { value: \"0\" }) => {\r\n    return () => {\r\n      setTooltipContent(\r\n        `${geo.properties.st_nm}: ${commaSeperated(\r\n          Number(current.value)\r\n        )} ${type}`\r\n      );\r\n    };\r\n  };\r\n\r\n  const onMouseLeave = () => {\r\n    setTooltipContent(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"container choropleth\">\r\n      <ReactTooltip multiline={true}>{tooltipContent}</ReactTooltip>\r\n      <ComposableMap\r\n        projectionConfig={PROJECTION_CONFIG}\r\n        projection=\"geoMercator\"\r\n        width={192}\r\n        height={220}\r\n        data-tip=\"\"\r\n      >\r\n        <Geographies geography={INDIA_TOPO_JSON}>\r\n          {({ geographies }) =>\r\n            geographies.map((geo) => {\r\n              const current = data.find((s) => s.id === geo.id);\r\n              return (\r\n                <Geography\r\n                  key={geo.rsmKey}\r\n                  geography={geo}\r\n                  fill={current ? colorScale(Number(current.value)) : \"#FFFFFF\"}\r\n                  style={geographyStyle}\r\n                  onMouseEnter={onMouseEnter(geo, current)}\r\n                  onMouseLeave={onMouseLeave}\r\n                  stroke={colorLow}\r\n                  strokeWidth={0.15}\r\n                />\r\n              );\r\n            })\r\n          }\r\n        </Geographies>\r\n      </ComposableMap>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Choropleth;\r\n","import React, { Component } from \"react\";\r\nimport Choropleth from \"./choropleth\";\r\nimport * as Icon from \"react-feather\";\r\nimport { commaSeperated, timeSince } from \"../utils/common-functions\";\r\nimport ReactGa from \"react-ga\";\r\n\r\nclass Graph extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [],\r\n      data2: [],\r\n      tests: [],\r\n      isLoaded: false,\r\n      toggleActive: false,\r\n      clickConfirmedMap: false,\r\n      clickActiveMap: true,\r\n      clickRecoveredMap: false,\r\n      clickDeceasedMap: false,\r\n      beginning: true,\r\n      twoWeeks: false,\r\n      oneMonth: false,\r\n    };\r\n    this.onToggle = this.onToggle.bind(this);\r\n    this.onClickConfirmed = this.onClickConfirmed.bind(this);\r\n    this.onClickActive = this.onClickActive.bind(this);\r\n    this.onClickRecovered = this.onClickRecovered.bind(this);\r\n    this.onClickDeceased = this.onClickDeceased.bind(this);\r\n    this.handleBeginning = this.handleBeginning.bind(this);\r\n    this.handleTwoWeeks = this.handleTwoWeeks.bind(this);\r\n    this.handleOneMonth = this.handleOneMonth.bind(this);\r\n  }\r\n  onToggle(toggleActive) {\r\n    this.setState({ toggleActive });\r\n  }\r\n\r\n  onClickConfirmed(clickConfirmedMap) {\r\n    this.setState({ clickConfirmedMap });\r\n  }\r\n  onClickActive(clickActiveMap) {\r\n    this.setState({ clickActiveMap });\r\n  }\r\n  onClickRecovered(clickRecoveredMap) {\r\n    this.setState({ clickRecoveredMap });\r\n  }\r\n  onClickDeceased(clickDeceasedMap) {\r\n    this.setState({ clickDeceasedMap });\r\n  }\r\n\r\n  handleBeginning({ beginning }) {\r\n    this.setState({ beginning });\r\n  }\r\n  handleTwoWeeks({ twoWeeks }) {\r\n    this.setState({ twoWeeks });\r\n  }\r\n  handleOneMonth({ oneMonth }) {\r\n    this.setState({ oneMonth });\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://api.covid19india.org/data.json\").then((res) =>\r\n      res.json().then((json) => {\r\n        this.setState({\r\n          isLoaded: true,\r\n          data: json.cases_time_series,\r\n          data2: json.statewise,\r\n          tests: json.tested,\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      isLoaded,\r\n      data,\r\n      data2,\r\n      \r\n      clickConfirmedMap,\r\n      clickActiveMap,\r\n      clickRecoveredMap,\r\n      clickDeceasedMap,\r\n    } = this.state;\r\n    const graphClass = window.innerWidth < 767 ? \"\" : \"container\";\r\n\r\n    const dailyConfirmed = [];\r\n    data.map((item) => dailyConfirmed.push(Number(item.dailyconfirmed)));\r\n    const dailyActive = [];\r\n    data.map((item) =>\r\n      dailyActive.push(\r\n        Number(item.dailyconfirmed) -\r\n          Number(item.dailyrecovered) -\r\n          Number(item.dailydeceased)\r\n      )\r\n    );\r\n\r\n    const dailyActiveJson = [];\r\n    data.map((item) =>\r\n      dailyActiveJson.push({\r\n        dailyactive:\r\n          Number(item.dailyconfirmed) -\r\n          Number(item.dailyrecovered) -\r\n          Number(item.dailydeceased),\r\n        date: item.date,\r\n      })\r\n    );\r\n\r\n    const dailyRecovered = [];\r\n    data.map((item) => dailyRecovered.push(Number(item.dailyrecovered)));\r\n    const dailyDeceased = [];\r\n    data.map((item) => dailyDeceased.push(Number(item.dailydeceased)));\r\n\r\n    const totalConfirmed = [];\r\n    data.map((item) => totalConfirmed.push(Number(item.totalconfirmed)));\r\n    const totalActive = [];\r\n    data.map((item) =>\r\n      totalActive.push(\r\n        Number(item.totalconfirmed) -\r\n          Number(item.totalrecovered) -\r\n          Number(item.totaldeceased)\r\n      )\r\n    );\r\n\r\n    const totalActiveJson = [];\r\n    data.map((item) =>\r\n      totalActiveJson.push({\r\n        totalactive:\r\n          Number(item.totalconfirmed) -\r\n          Number(item.totalrecovered) -\r\n          Number(item.totaldeceased),\r\n        date: item.date,\r\n      })\r\n    );\r\n    const totalRecovered = [];\r\n    data.map((item) => totalRecovered.push(Number(item.totalrecovered)));\r\n    const totalDeceased = [];\r\n    data.map((item) => totalDeceased.push(Number(item.totaldeceased)));\r\n\r\n    const date = [];\r\n    data.map((item) => date.push(item.date));\r\n\r\n    const confirmedStatesData = [];\r\n    data2.map((item) =>\r\n      confirmedStatesData.push({\r\n        id: item.statecode,\r\n        state: item.state,\r\n        value: Number(item.confirmed),\r\n      })\r\n    );\r\n    const activeStatesData = [];\r\n    data2.map((item) =>\r\n      activeStatesData.push({\r\n        id: item.statecode,\r\n        state: item.state,\r\n        value:\r\n          Number(item.confirmed) - Number(item.recovered) - Number(item.deaths),\r\n      })\r\n    );\r\n    const recoveredStatesData = [];\r\n    data2.map((item) =>\r\n      recoveredStatesData.push({\r\n        id: item.statecode,\r\n        state: item.state,\r\n        value: Number(item.recovered),\r\n      })\r\n    );\r\n    const deceasedStatesData = [];\r\n    data2.map((item) =>\r\n      deceasedStatesData.push({\r\n        id: item.statecode,\r\n        state: item.state,\r\n        value: Number(item.deaths),\r\n      })\r\n    );\r\n\r\n    const grandTotal = [];\r\n\r\n    data2.map((item) => {\r\n      if (item.statecode === \"TT\") {\r\n        grandTotal.push(item);\r\n      }\r\n    });\r\n    if (isLoaded) {\r\n      const lastUpdatedTime = timeSince(\r\n        new Date(\r\n          [\r\n            grandTotal[0].lastupdatedtime.split(/\\//)[1],\r\n            grandTotal[0].lastupdatedtime.split(/\\//)[0],\r\n            grandTotal[0].lastupdatedtime.split(/\\//)[2],\r\n          ].join(\"/\")\r\n        ).getTime()\r\n      );\r\n      return (\r\n        <React.Fragment>\r\n          <div className={graphClass}>\r\n            <div\r\n              className=\"row\"\r\n              style={{\r\n                justifyContent: \"center\",\r\n                marginBottom: \"25px\",\r\n              }}\r\n            >\r\n              {\" \"}\r\n              \r\n            </div>\r\n            <div className=\"w-100\"></div>\r\n\r\n            <div className=\"row\">\r\n              <div className=\"col-8\">\r\n                <h4\r\n                  className=\"fadeInUp\"\r\n                  style={{\r\n                    justifyContent: \"left\",\r\n                    textAlign: \"left\",\r\n                    animationDelay: \"2.2s\",\r\n                    marginBottom: \"15px\",\r\n                  }}\r\n                >\r\n                  INDIA MAP\r\n                  <h6 id=\"line1\" style={{ fontSize: 8, color: \"grey\" }}>\r\n                    Tap on a State/UT\r\n                  </h6>\r\n                  <h6 id=\"line2\" style={{ fontSize: 8, color: \"grey\" }}>\r\n                    Hover Over a State/UT\r\n                  </h6>\r\n                </h4>\r\n              </div>\r\n              <div className=\"w-100\"></div>\r\n              <div\r\n                className=\"fadeInUp toggle-map container\"\r\n                style={{ animationDelay: \"2.3s\" }}\r\n              >\r\n                <div className=\"row row-cols-4\">\r\n                  <div\r\n                    className=\"col\"\r\n                    onClick={() => {\r\n                      this.setState({\r\n                        clickConfirmedMap: true,\r\n                        clickActiveMap: false,\r\n                        clickRecoveredMap: false,\r\n                        clickDeceasedMap: false,\r\n                      });\r\n                    }}\r\n                  >\r\n                    <h6\r\n                      className=\"text-info pad\"\r\n                      style={{\r\n                        background: `${\r\n                          clickConfirmedMap\r\n                            ? \"rgb(189, 216, 228)\"\r\n                            : \"rgba(189, 216, 228, 0.2)\"\r\n                        }`,\r\n                      }}\r\n                    >\r\n                      CONFIRMED\r\n                      <h6 style={{ fontSize: 14 }}>\r\n                        {commaSeperated(grandTotal[0].confirmed)}\r\n                        <h6 style={{ fontSize: 10 }}>\r\n                          {Number(grandTotal[0].deltaconfirmed) > 0 ? (\r\n                            <Icon.PlusCircle\r\n                              size={9}\r\n                              strokeWidth={3}\r\n                              fill=\"rgba(23, 162, 184, 0.2)\"\r\n                              style={{ verticalAlign: -1 }}\r\n                            />\r\n                          ) : (\r\n                            <Icon.Meh\r\n                              size={9}\r\n                              strokeWidth={3}\r\n                              fill=\"rgba(23, 162, 184, 0.2)\"\r\n                              style={{ verticalAlign: -1 }}\r\n                            />\r\n                          )}\r\n                          {Number(grandTotal[0].deltaconfirmed) > 0\r\n                            ? \" \" + commaSeperated(grandTotal[0].deltaconfirmed)\r\n                            : \"\"}\r\n                        </h6>\r\n                      </h6>\r\n                    </h6>\r\n                  </div>\r\n                  <div\r\n                    className=\"col\"\r\n                    onClick={() => {\r\n                      this.setState({\r\n                        clickConfirmedMap: false,\r\n                        clickActiveMap: true,\r\n                        clickRecoveredMap: false,\r\n                        clickDeceasedMap: false,\r\n                      });\r\n                    }}\r\n                  >\r\n                    <h6\r\n                      className=\"pad\"\r\n                      style={{\r\n                        color: \"rgb(255, 68, 106)\",\r\n\r\n                        background: `${\r\n                          clickActiveMap\r\n                            ? \"rgba(247, 177, 177, 0.9)\"\r\n                            : \"rgba(247, 177, 177, 0.2)\"\r\n                        }`,\r\n                      }}\r\n                    >\r\n                      ACTIVE\r\n                      <h6 style={{ fontSize: 14 }}>\r\n                        {commaSeperated(grandTotal[0].active)}\r\n                        <h6 style={{ fontSize: 10 }}>\r\n                          {Number(grandTotal[0].deltaconfirmed) -\r\n                            Number(grandTotal[0].deltarecovered) -\r\n                            Number(grandTotal[0].deltadeaths) >\r\n                          0 ? (\r\n                            <Icon.PlusCircle\r\n                              size={9}\r\n                              strokeWidth={3}\r\n                              fill=\"rgba(255, 68, 106, 0.2)\"\r\n                              style={{ verticalAlign: -1 }}\r\n                            />\r\n                          ) : (\r\n                            <Icon.Heart\r\n                              size={9}\r\n                              strokeWidth={3}\r\n                              fill=\"rgba(255, 68, 106, 0.4)\"\r\n                              style={{ verticalAlign: -1 }}\r\n                            />\r\n                          )}{\" \"}\r\n                          {Number(grandTotal[0].deltaconfirmed) -\r\n                            Number(grandTotal[0].deltarecovered) -\r\n                            Number(grandTotal[0].deltadeaths) >\r\n                          0\r\n                            ? \" \" +\r\n                              commaSeperated(\r\n                                Number(grandTotal[0].deltaconfirmed) -\r\n                                  Number(grandTotal[0].deltarecovered) -\r\n                                  Number(grandTotal[0].deltadeaths)\r\n                              )\r\n                            : \"\"}\r\n                        </h6>\r\n                      </h6>\r\n                    </h6>\r\n                  </div>\r\n                  <div\r\n                    className=\"col\"\r\n                    onClick={() => {\r\n                      this.setState({\r\n                        clickActiveMap: false,\r\n                        clickConfirmedMap: false,\r\n                        clickRecoveredMap: true,\r\n                        clickDeceasedMap: false,\r\n                      });\r\n                    }}\r\n                  >\r\n                    <h6\r\n                      className=\"text-success pad\"\r\n                      style={{\r\n                        background: `${\r\n                          clickRecoveredMap\r\n                            ? \"rgb(182, 229, 182)\"\r\n                            : \"rgba(182, 229, 182, 0.2)\"\r\n                        }`,\r\n                      }}\r\n                    >\r\n                      RECOVERED\r\n                      <h6 style={{ fontSize: 14 }}>\r\n                        {commaSeperated(grandTotal[0].recovered)}\r\n                        <h6 style={{ fontSize: 10 }}>\r\n                          {Number(grandTotal[0].deltarecovered) > 0 ? (\r\n                            <Icon.PlusCircle\r\n                              size={9}\r\n                              strokeWidth={3}\r\n                              fill=\"rgba(23, 162, 184, 0.2)\"\r\n                              style={{ verticalAlign: -1 }}\r\n                            />\r\n                          ) : (\r\n                            <Icon.Smile\r\n                              size={9}\r\n                              strokeWidth={3}\r\n                              fill=\"rgba(23, 162, 184, 0.2)\"\r\n                              style={{ verticalAlign: -1 }}\r\n                            />\r\n                          )}\r\n                          {Number(grandTotal[0].deltarecovered) > 0\r\n                            ? \" \" + commaSeperated(grandTotal[0].deltarecovered)\r\n                            : \"\"}\r\n                        </h6>\r\n                      </h6>\r\n                    </h6>\r\n                  </div>\r\n                  <div\r\n                    className=\"col\"\r\n                    onClick={() => {\r\n                      this.setState({\r\n                        clickActiveMap: false,\r\n                        clickRecoveredMap: false,\r\n                        clickConfirmedMap: false,\r\n                        clickDeceasedMap: true,\r\n                      });\r\n                    }}\r\n                  >\r\n                    <h6\r\n                      className=\"text-secondary pad\"\r\n                      style={{\r\n                        background: `${\r\n                          clickDeceasedMap\r\n                            ? \"rgb(179, 173, 173)\"\r\n                            : \"rgba(179, 173, 173, 0.2)\"\r\n                        }`,\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                    >\r\n                      DECEASED\r\n                      <h6 style={{ fontSize: 14 }}>\r\n                        {commaSeperated(grandTotal[0].deaths)}\r\n                        <h6 style={{ fontSize: 10 }}>\r\n                          {Number(grandTotal[0].deltadeaths) > 0 ? (\r\n                            <Icon.PlusCircle\r\n                              size={9}\r\n                              strokeWidth={3}\r\n                              fill=\"rgba(179, 173, 173, 0.5)\"\r\n                              style={{ verticalAlign: -1 }}\r\n                            />\r\n                          ) : (\r\n                            <Icon.Meh\r\n                              size={9}\r\n                              strokeWidth={3}\r\n                              fill=\"rgba(179, 173, 173, 0.5)\"\r\n                              style={{ verticalAlign: -1 }}\r\n                            />\r\n                          )}{\" \"}\r\n                          {Number(grandTotal[0].deltadeaths) > 0\r\n                            ? \" \" + commaSeperated(grandTotal[0].deltadeaths)\r\n                            : \"\"}\r\n                        </h6>\r\n                      </h6>\r\n                    </h6>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"w-100\"></div>\r\n              <div\r\n                className=\"col fadeInUp\"\r\n                style={{\r\n                  justifyContent: \"left\",\r\n                  animationDelay: \"2.35s\",\r\n                }}\r\n              >\r\n                <h1 className=\"lastUpdatedIndiaMap\">\r\n                  Last Updated\r\n                  <h6>about {lastUpdatedTime}</h6>\r\n                </h1>\r\n                {clickConfirmedMap && (\r\n                  <Choropleth\r\n                    data={confirmedStatesData.slice(\r\n                      1,\r\n                      confirmedStatesData.length - 1\r\n                    )}\r\n                    colorLow=\"rgba(29, 141, 158, 0.85)\"\r\n                    colorHigh=\"rgba(29, 141, 158, 1)\"\r\n                    fill=\"rgb(18, 167, 190)\"\r\n                    type=\"Infected\"\r\n                    onMouseEnter={ReactGa.event({\r\n                      category: \"India map\",\r\n                      action: \"India map clicked\",\r\n                    })}\r\n                  />\r\n                )}\r\n                {clickActiveMap && (\r\n                  <Choropleth\r\n                    data={activeStatesData.slice(\r\n                      1,\r\n                      activeStatesData.length - 1\r\n                    )}\r\n                    colorLow=\"rgba(173, 28, 57, 0.85)\"\r\n                    colorHigh=\"rgba(173, 28, 57, 1)\"\r\n                    fill=\"rgb(228, 116, 138)\"\r\n                    type=\"Active\"\r\n                    onMouseEnter={ReactGa.event({\r\n                      category: \"India map\",\r\n                      action: \"India map clicked\",\r\n                    })}\r\n                  />\r\n                )}\r\n                {clickRecoveredMap && (\r\n                  <Choropleth\r\n                    data={recoveredStatesData.slice(\r\n                      1,\r\n                      recoveredStatesData.length - 1\r\n                    )}\r\n                    colorLow=\"rgba(40, 167, 69, 0.85)\"\r\n                    colorHigh=\"rgba(40, 167, 69, 1)\"\r\n                    fill=\"rgb(30, 209, 72)\"\r\n                    type=\"Recovered\"\r\n                    onMouseEnter={ReactGa.event({\r\n                      category: \"India map\",\r\n                      action: \"India map clicked\",\r\n                    })}\r\n                  />\r\n                )}\r\n                {clickDeceasedMap && (\r\n                  <Choropleth\r\n                    data={deceasedStatesData.slice(\r\n                      1,\r\n                      deceasedStatesData.length - 1\r\n                    )}\r\n                    colorLow=\"rgba(74, 79, 83, 0.6)\"\r\n                    colorHigh=\"rgba(74, 79, 83, 1)\"\r\n                    fill=\"rgb(108, 117, 125)\"\r\n                    type=\"Deceased\"\r\n                    onMouseEnter={ReactGa.event({\r\n                      category: \"India map\",\r\n                      action: \"India map clicked\",\r\n                    })}\r\n                  />\r\n                )}\r\n              </div>\r\n              <div className=\"w-100\"></div>\r\n              <div\r\n                className=\"col fadeInUp\"\r\n                style={{\r\n                  textAlign: \"left\",\r\n                  animationDelay: \"2.3s\",\r\n                  marginBottom: \"-8px\",\r\n                }}\r\n              >\r\n                <h6\r\n                  className=\"home-title\"\r\n                  style={{\r\n                    color: \"#ff446a\",\r\n                    wordBreak: \"keep-all\",\r\n                    wordWrap: \"normal\",\r\n                  }}\r\n                >\r\n\r\n                </h6>\r\n              </div>\r\n              </div>\r\n              </div>\r\n        </React.Fragment>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Graph;","import React, { useEffect, useState } from \"react\";\r\nimport { indianstates } from \"./API/index\";\r\n\r\nconst StatePicker = ({ handleStateChange }) => {\r\n  const [fetchedStates, setStates] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setStates(await indianstates());\r\n    };\r\n    fetchData();\r\n  }, [setStates]);\r\n\r\n  if (fetchedStates) {\r\n    return (\r\n      <select\r\n        className=\"form-control form-control-sm\"\r\n        onChange={(e) => handleStateChange(e.target.value)}\r\n      >\r\n        <option value=\"\" selected disabled>\r\n          Select a State/UT\r\n        </option>\r\n        {fetchedStates.map((item, i) =>\r\n          item.statecode !== \"UN\" ? (\r\n            <option key={i} value={item.statecode}>\r\n              {item.state}\r\n            </option>\r\n          ) : (\r\n            \"\"\r\n          )\r\n        )}\r\n      </select>\r\n    );\r\n  } else return null;\r\n};\r\n\r\nexport default StatePicker;\r\n","import React, { Component } from \"react\";\r\nimport { indianstates } from \"./API/index\";\r\nimport StatePicker from \"./statepicker\";\r\nimport Tooltip, { TooltipProps } from \"@material-ui/core/Tooltip\";\r\nimport { Theme, makeStyles } from \"@material-ui/core/styles\";\r\nimport InfoTwoToneIcon from \"@material-ui/icons/InfoTwoTone\";\r\nimport parse from \"html-react-parser\";\r\nimport {\r\n  commaSeperated,\r\n  DeltaArrow,\r\n  DeltaValue,\r\n} from \"../utils/common-functions\";\r\n\r\nclass StateTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cross: true,\r\n      stateData: [],\r\n      requiredData: [],\r\n      requiredState: \"\",\r\n      back: false,\r\n      sortConfirmed: true,\r\n      sortActive: false,\r\n      sortRecovered: false,\r\n      sortDeceased: false,\r\n      sortOrder: true,\r\n    };\r\n    this.onBack = this.onBack.bind(this);\r\n    this.onSortConfirmed = this.onSortConfirmed.bind(this);\r\n    this.onSortActive = this.onSortActive.bind(this);\r\n    this.onSortRecovered = this.onSortRecovered.bind(this);\r\n    this.onSortDeceased = this.onSortDeceased.bind(this);\r\n    this.handleSortOrder = this.handleSortOrder.bind(this);\r\n  }\r\n\r\n  onBack({ back }) {\r\n    this.setState({ back });\r\n  }\r\n\r\n  onSortConfirmed({ sortConfirmed }) {\r\n    this.setState({ sortConfirmed });\r\n  }\r\n\r\n  onSortActive({ sortActive }) {\r\n    this.setState({ sortActive });\r\n  }\r\n\r\n  onSortRecovered({ sortRecovered }) {\r\n    this.setState({ sortRecovered });\r\n  }\r\n\r\n  onSortDeceased({ sortDeceased }) {\r\n    this.setState({ sortDeceased });\r\n  }\r\n\r\n  handleSortOrder({ sortOrder }) {\r\n    this.setState({ sortOrder });\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const fetchedStates = await indianstates();\r\n    this.setState({ stateData: fetchedStates });\r\n  }\r\n\r\n  handleStateChange = async (state) => {\r\n    const requiredStateData = [];\r\n    this.state.stateData.map((item) => {\r\n      if (state === item.statecode) requiredStateData.push(item.districtData);\r\n    });\r\n\r\n    this.setState({\r\n      requiredData: requiredStateData,\r\n      requiredState: state,\r\n      back: true,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      requiredData,\r\n      back,\r\n      sortConfirmed,\r\n      sortActive,\r\n      sortRecovered,\r\n      sortDeceased,\r\n      sortOrder,\r\n    } = this.state;\r\n\r\n    if (requiredData.length) {\r\n      if (sortConfirmed) {\r\n        requiredData[0].sort(function (x, y) {\r\n          return sortOrder\r\n            ? Number(y.confirmed) - Number(x.confirmed)\r\n            : Number(x.confirmed) - Number(y.confirmed);\r\n        });\r\n      }\r\n      if (sortActive) {\r\n        requiredData[0].sort(function (x, y) {\r\n          return !sortOrder\r\n            ? Number(y.active) - Number(x.active)\r\n            : Number(x.active) - Number(y.active);\r\n        });\r\n      }\r\n      if (sortRecovered) {\r\n        requiredData[0].sort(function (x, y) {\r\n          return !sortOrder\r\n            ? Number(y.recovered) - Number(x.recovered)\r\n            : Number(x.recovered) - Number(y.recovered);\r\n        });\r\n      }\r\n      if (sortDeceased) {\r\n        requiredData[0].sort(function (x, y) {\r\n          return !sortOrder\r\n            ? Number(y.deceased) - Number(x.deceased)\r\n            : Number(x.deceased) - Number(y.deceased);\r\n        });\r\n      }\r\n    }\r\n\r\n    const useStylesBootstrap = makeStyles((theme: Theme) => ({\r\n      arrow: {\r\n        color: theme.palette.common.black,\r\n      },\r\n      tooltip: {\r\n        backgroundColor: theme.palette.common.black,\r\n      },\r\n    }));\r\n\r\n    function BootstrapTooltip(props: TooltipProps) {\r\n      const classes = useStylesBootstrap();\r\n\r\n      return (\r\n        <Tooltip disableTouchListener arrow classes={classes} {...props} />\r\n      );\r\n    }\r\n\r\n    const stateFullName = {\r\n      AP: \"Andhra Pradesh\",\r\n      AN: \"A & N Islands\",\r\n      AR: \"Arunachal Pradesh\",\r\n      AS: \"Assam\",\r\n      BR: \"Bihar\",\r\n      CH: \"Chandigarh\",\r\n      CT: \"Chattisgarh\",\r\n      DN: \"DNH DU\",\r\n      DL: \"Delhi\",\r\n      GA: \"Goa\",\r\n      GJ: \"Gujarat\",\r\n      HP: \"Himachal Pradesh\",\r\n      HR: \"Haryana\",\r\n      JH: \"Jharkhand\",\r\n      JK: \"Jammu & Kashmir\",\r\n      KA: \"Karnataka\",\r\n      KL: \"Kerala\",\r\n      LA: \"Ladakh\",\r\n      LD: \"Lakshadweep\",\r\n      MH: \"Maharashtra\",\r\n      ML: \"Meghalaya\",\r\n      MN: \"Manipur\",\r\n      MP: \"Madhya Pradesh\",\r\n      MZ: \"Mizoram\",\r\n      NL: \"Nagaland\",\r\n      OR: \"Odisha\",\r\n      PB: \"Punjab\",\r\n      PY: \"Puducherry\",\r\n      RJ: \"Rajasthan\",\r\n      SK: \"Sikkim\",\r\n      TG: \"Telangana\",\r\n      TN: \"Tamil Nadu\",\r\n      TR: \"Tripura\",\r\n      UP: \"Uttar Pradesh\",\r\n      UT: \"Uttarakhand\",\r\n      WB: \"West Bengal\",\r\n    };\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div\r\n          className=\"row fadeInUp\"\r\n          style={{\r\n            alignItems: \"center\",\r\n            alignContent: \"center\",\r\n            animationDelay: \"1.8s\",\r\n            marginBottom: \"12px\",\r\n          }}\r\n        >\r\n          <StatePicker handleStateChange={this.handleStateChange} />\r\n        </div>\r\n        <div className=\"w-100\"></div>\r\n        <div className=\"w-100\"></div>\r\n        {requiredData.length && back ? (\r\n          <div className=\"row\">\r\n            <div className=\"col-10 fadeInUp\" style={{ animationDelay: \"0.3s\" }}>\r\n              \r\n            </div>\r\n            <div className=\"col-2 fadeInUp\" style={{ animationDelay: \"0.4s\" }}>\r\n              \r\n            </div>\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <div className=\"w-100\"></div>\r\n        {requiredData.length && back ? (\r\n          <div className=\"row fadeInUp\" style={{ animationDelay: \"0.5s\" }}>\r\n            <table\r\n              className=\"table table-sm table-striped table-borderless\"\r\n              style={{\r\n                minWidth: \"350px\",\r\n                tableLayout: \"fixed\",\r\n                width: \"100%\",\r\n                marginBottom: \"-15px\",\r\n                marginTop: \"-20px\",\r\n              }}\r\n              align=\"center\"\r\n            >\r\n              <thead className=\"thead-dark\">\r\n                <tr>\r\n                  <th className=\"th wideRow sticky-top\" id=\"line1\">\r\n                    DISTRICT\r\n                  </th>\r\n                  <th\r\n                    className=\"th sticky-top\"\r\n                    id=\"line2\"\r\n                    style={{ width: \"175px\" }}\r\n                  >\r\n                    DISTRICT\r\n                  </th>\r\n                  <th\r\n                    className=\"th sticky-top text-info\"\r\n                    style={{ textAlign: \"center\" }}\r\n                    onClick={() =>\r\n                      this.setState({\r\n                        sortConfirmed: true,\r\n                        sortActive: false,\r\n                        sortRecovered: false,\r\n                        sortDeceased: false,\r\n                        sortOrder: !sortOrder,\r\n                      })\r\n                    }\r\n                  >\r\n                    CONFIRMED\r\n                  </th>\r\n                  <th\r\n                    className=\"th sticky-top narrowRow\"\r\n                    style={{ color: \"rgb(255, 68, 106)\", textAlign: \"center\" }}\r\n                    onClick={() =>\r\n                      this.setState({\r\n                        sortConfirmed: false,\r\n                        sortActive: true,\r\n                        sortRecovered: false,\r\n                        sortDeceased: false,\r\n                        sortOrder: !sortOrder,\r\n                      })\r\n                    }\r\n                  >\r\n                    ACTIVE\r\n                  </th>\r\n                  <th\r\n                    className=\"th sticky-top text-success\"\r\n                    style={{ textAlign: \"center\" }}\r\n                    onClick={() =>\r\n                      this.setState({\r\n                        sortConfirmed: false,\r\n                        sortActive: false,\r\n                        sortRecovered: true,\r\n                        sortDeceased: false,\r\n                        sortOrder: !sortOrder,\r\n                      })\r\n                    }\r\n                  >\r\n                    RECOVERED\r\n                  </th>\r\n                  <th\r\n                    className=\"th sticky-top narrowRow text-secondary\"\r\n                    id=\"line1\"\r\n                    style={{ textAlign: \"center\" }}\r\n                    onClick={() =>\r\n                      this.setState({\r\n                        sortConfirmed: false,\r\n                        sortActive: false,\r\n                        sortRecovered: false,\r\n                        sortDeceased: true,\r\n                        sortOrder: !sortOrder,\r\n                      })\r\n                    }\r\n                  >\r\n                    DEATHS\r\n                  </th>\r\n                  <th\r\n                    className=\"th sticky-top text-secondary\"\r\n                    id=\"line2\"\r\n                    style={{ textAlign: \"center\", width: \"70px\" }}\r\n                    onClick={() =>\r\n                      this.setState({\r\n                        sortConfirmed: false,\r\n                        sortActive: false,\r\n                        sortRecovered: false,\r\n                        sortDeceased: true,\r\n                        sortOrder: !sortOrder,\r\n                      })\r\n                    }\r\n                  >\r\n                    DECEASED\r\n                  </th>\r\n                </tr>\r\n              </thead>\r\n              <tbody className=\"tbody\">\r\n                {requiredData.map((item) =>\r\n                  item.map((district) => (\r\n                    <tr className=\"tr\">\r\n                      <td\r\n                        className=\"tdleft align-middle\"\r\n                        style={{\r\n                          color: \"grey\",\r\n                          borderLeftWidth: \"5px\",\r\n                          borderStyle: \"solid\",\r\n                        }}\r\n                      >\r\n                        {district.district}\r\n                        {district.notes ? (\r\n                          <BootstrapTooltip title={parse(district.notes)}>\r\n                            <span style={{ verticalAlign: \"0.05rem\" }}>\r\n                              <InfoTwoToneIcon\r\n                                color=\"inherit\"\r\n                                fontSize=\"inherit\"\r\n                              />\r\n                            </span>\r\n                          </BootstrapTooltip>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </td>\r\n                      <td\r\n                        className=\"delta td text-secondary align-middle\"\r\n                        style={{ textAlign: \"right\" }}\r\n                      >\r\n                        <span className=\"arrowup text-info\">\r\n                          <DeltaArrow\r\n                            deltaType={district.delta.confirmed}\r\n                            color={\"#42b3f4\"}\r\n                          />\r\n                          <DeltaValue deltaType={district.delta.confirmed} />\r\n                        </span>\r\n                        &nbsp;&nbsp;\r\n                        {commaSeperated(district.confirmed)}\r\n                      </td>\r\n                      <td\r\n                        className=\"delta td text-secondary narrowRow align-middle\"\r\n                        style={{ textAlign: \"right\" }}\r\n                      >\r\n                        {Number(district.active) > 0\r\n                          ? commaSeperated(district.active)\r\n                          : Number(district.active) < 0\r\n                          ? \"-\" + commaSeperated(Math.abs(district.active))\r\n                          : \"-\"}\r\n                      </td>\r\n                      <td\r\n                        className=\"delta td text-secondary align-middle\"\r\n                        style={{ textAlign: \"right\" }}\r\n                      >\r\n                        <span className=\"arrowup text-success\">\r\n                          <DeltaArrow\r\n                            deltaType={district.delta.recovered}\r\n                            color={\"#28a745\"}\r\n                          />\r\n                          <DeltaValue deltaType={district.delta.recovered} />\r\n                        </span>\r\n                        &nbsp;&nbsp;\r\n                        {Number(district.recovered)\r\n                          ? commaSeperated(district.recovered)\r\n                          : \"-\"}\r\n                      </td>\r\n                      <td\r\n                        className=\"delta td text-secondary narrowRow align-middle\"\r\n                        style={{ textAlign: \"right\" }}\r\n                      >\r\n                        <span className=\"arrowup text-secondary\">\r\n                          <DeltaArrow\r\n                            deltaType={district.delta.deceased}\r\n                            color={\"#6c757d\"}\r\n                          />\r\n                          <DeltaValue deltaType={district.delta.deceased} />\r\n                        </span>\r\n                        &nbsp;&nbsp;\r\n                        {Number(district.deceased)\r\n                          ? commaSeperated(district.deceased)\r\n                          : \"-\"}\r\n                      </td>\r\n                    </tr>\r\n                  ))\r\n                )}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StateTable;\r\n","import React, { Component } from \"react\";\r\nimport Graph from \"./graph\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport StateTable from './stateTable';\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"home\">\r\n          <Helmet>\r\n            <title>INDIA: STATE WISE</title>\r\n            \r\n          </Helmet>\r\n         \r\n            \r\n            <div className=\"col-sm\">\r\n              <StateTable />\r\n            </div>\r\n            \r\n              <div align=\"col-sm\">\r\n                <Graph />\r\n              </div>\r\n            </div>\r\n          \r\n       \r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;"],"sourceRoot":""}