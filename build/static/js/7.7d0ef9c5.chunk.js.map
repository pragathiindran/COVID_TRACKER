{"version":3,"sources":["components/API/index.js","components/TEST/Cards/Cards.module.css","components/TEST/Chart/Chart.module.css","components/TEST/CountryPicker/CountryPicker.module.css","components/Test.module.css","components/TEST/Cards/Cards.jsx","components/TEST/Chart/Chart.jsx","components/TEST/CountryPicker/CountryPicker.jsx","components/worldchoropleth.jsx","components/world.jsx","components/test.jsx"],"names":["url2","countries","a","axios","get","data","console","log","fetchTotal","country","changeableUrl","updated","cases","todayCases","deaths","todayDeaths","recovered","active","critical","fetchDailyData","fetchChAusCan","timeline","indianstates","module","exports","theme","createMuiTheme","overrides","MuiCardContent","root","padding","Cards","className","styles","container","font","ThemeProvider","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","style","color","fontWeight","fontFamily","gutterBottom","variant","start","end","duration","separator","fontSize","Date","toDateString","toFixed","deceased","Charts","defaults","global","tooltips","intersect","mode","position","backgroundColor","displayColors","borderColor","borderWidth","titleFontColor","bodyFontColor","caretPadding","legend","display","hover","chartOptions","animation","steps","scale","responsive","events","maintainAspectRatio","elements","point","radius","line","tension","layout","left","right","top","bottom","title","text","scales","yAxes","type","ticks","callback","label","index","labels","scaleLabel","labelString","xAxes","time","unit","tooltipFormat","stepSize","displayFormats","millisecond","second","minute","hour","day","week","month","quarter","year","gridLines","months","lineChart","Fragment","Object","keys","map","getDate","getMonth","datasets","values","fill","options","CountryPicker","handleCountryChange","useState","fetchedCountries","setFetchedCountries","useEffect","fetchAPI","FormControl","formControl","animationDelay","NativeSelect","defaultValue","onChange","e","target","value","onClick","ReactGa","event","category","action","i","key","WORLD_TOPO_JSON","require","PROJECTION_CONFIG","COLOR_RANGE","geographyStyle","default","outline","transition","pressed","WorldChoropleth","statesdata","tooltipContent","setTooltipContent","colorScale","String","Math","ceil","reduce","max","scaleLog","domain","d","range","onMouseEnter","geo","current","properties","NAME","commaSeperated","Number","onMouseLeave","projectionConfig","projection","width","height","data-tip","geography","geographies","find","s","id","ISO_A3","rsmKey","stroke","strokeWidth","World","props","state","isLoaded1","isLoaded2","countiesTodayData","countiesYesterdayData","toggleToday","toggleYesterday","onToggleToday","bind","onToggleYesterday","this","setState","fetch","then","res","json","isLoaded","push","countryInfo","iso3","b","newCases","newDeaths","countriesdata","Helmet","alignContent","role","Component","Test","data2","fetchedData","fetchedDailydata","dataProvince","toLowerCase","province","name","content","Chart"],"mappings":"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","file":"static/js/7.7d0ef9c5.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst url1 = \"https://corona.lmao.ninja/v2/countries\";\r\nconst url2 = \"https://corona.lmao.ninja/v2\";\r\nconst url3 = \"https://corona.lmao.ninja/v2/historical/all/?lastdays=all\";\r\nconst url4 = \"https://api.covid19india.org/v2/state_district_wise.json\";\r\nconst url5 = \"https://api.covid19india.org/state_test_data.json\";\r\nconst url6 = \"https://corona.lmao.ninja/v2/all\";\r\nconst url7 = \"https://api.covid19india.org/districts_daily.json\";\r\n\r\nexport const countries = async () => {\r\n  try {\r\n    const { data } = await axios.get(url1);\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchTotal = async (country) => {\r\n  let changeableUrl = url2;\r\n  if (country) {\r\n    changeableUrl = `${url2}/countries/${country}`;\r\n  } else {\r\n    changeableUrl = `${url2}/all`;\r\n  }\r\n  try {\r\n    const {\r\n      data: {\r\n        updated,\r\n        cases,\r\n        todayCases,\r\n        deaths,\r\n        todayDeaths,\r\n        recovered,\r\n        active,\r\n        critical,\r\n      },\r\n    } = await axios.get(changeableUrl);\r\n\r\n    return {\r\n      updated,\r\n      cases,\r\n      todayCases,\r\n      deaths,\r\n      todayDeaths,\r\n      recovered,\r\n      active,\r\n      critical,\r\n    };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async (country) => {\r\n  let changeableUrl = url3;\r\n  if (country) {\r\n    changeableUrl = `${url2}/historical?lastdays=all`;\r\n    try {\r\n      const data = await axios.get(changeableUrl);\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  } else {\r\n    try {\r\n      const {\r\n        data: { cases, recovered, deaths },\r\n      } = await axios.get(changeableUrl);\r\n\r\n      return { cases, recovered, deaths };\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n};\r\n\r\nexport const fetchChAusCan = async (country) => {\r\n  try {\r\n    const {\r\n      data: {\r\n        timeline: { cases, recovered, deaths },\r\n      },\r\n    } = await axios.get(`${url2}/historical/${country}?lastdays=all`);\r\n\r\n    return { cases, recovered, deaths };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const indianstates = async () => {\r\n  try {\r\n    const { data } = await axios.get(url4);\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const statesTestData = async () => {\r\n  try {\r\n    const {\r\n      data: { states_tested_data },\r\n    } = await axios.get(url5);\r\n    return states_tested_data;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const worldTotalData = async () => {\r\n  try {\r\n    const {\r\n      data: { cases, todayCases, deaths, todayDeaths, recovered, active },\r\n    } = await axios.get(url6);\r\n    return { cases, todayCases, deaths, todayDeaths, recovered, active };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const districtsDaily = async () => {\r\n  try {\r\n    const {\r\n      data: { districtsDaily },\r\n    } = await axios.get(url7);\r\n    return districtsDaily;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3_4Zl\",\"card\":\"Cards_card__69qj0\",\"infected\":\"Cards_infected__17te4\",\"recovered\":\"Cards_recovered__37KMF\",\"deceased\":\"Cards_deceased__fjxlK\",\"font\":\"Cards_font__rp8BS\",\"MuiCardContent-root\":\"Cards_MuiCardContent-root__frD8d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__2SoXf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__15pc9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Test_container__3Nwg8\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport styles from \"./Cards.module.css\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\n\r\nconst theme = createMuiTheme({\r\n  overrides: {\r\n    MuiCardContent: {\r\n      root: {\r\n        padding: \"1px\",\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nconst Cards = ({\r\n  data: {\r\n    updated,\r\n    cases,\r\n    todayCases,\r\n    deaths,\r\n    todayDeaths,\r\n    recovered,\r\n    active,\r\n    critical,\r\n  },\r\n}) => {\r\n  if (!cases) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className={`${styles.container} fadeInUp ${styles.font}`}>\r\n      <ThemeProvider theme={theme}>\r\n        <Grid container spacing={2} justify=\"center\">\r\n          <Grid\r\n            item\r\n            component={Card}\r\n            xs\r\n            md={3}\r\n            className={cx(styles.card, styles.infected)}\r\n          >\r\n            <CardContent>\r\n              <Typography\r\n                style={{\r\n                  color: \"#2186b4\",\r\n                  fontWeight: 700,\r\n                  fontFamily: \"myFont\",\r\n                }}\r\n                gutterBottom\r\n              >\r\n                CONFIRMED\r\n              </Typography>\r\n              <Typography\r\n                variant=\"h6\"\r\n                style={{\r\n                  fontWeight: 500,\r\n                  fontFamily: \"myFont\",\r\n                }}\r\n              >\r\n                <CountUp start={0} end={cases} duration={2.5} separator=\",\" />\r\n              </Typography>\r\n              <Typography\r\n                color=\"textSecondary\"\r\n                variant=\"caption\"\r\n                style={{\r\n                  fontWeight: 500,\r\n                  fontFamily: \"myFont\",\r\n                }}\r\n              >\r\n                {todayCases ? \"+\" + todayCases : \"No Change\"}\r\n              </Typography>\r\n              <Typography\r\n                color=\"textSecondary\"\r\n                style={{\r\n                  fontWeight: 500,\r\n                  fontFamily: \"myFont\",\r\n                  fontSize: 10,\r\n                }}\r\n              >\r\n                {new Date(updated).toDateString()}\r\n              </Typography>\r\n            </CardContent>\r\n          </Grid>\r\n\r\n          <Grid\r\n            item\r\n            component={Card}\r\n            xs\r\n            md={3}\r\n            className={cx(styles.card, styles.recovered)}\r\n          >\r\n            <CardContent>\r\n              <Typography\r\n                gutterBottom\r\n                style={{\r\n                  fontWeight: 500,\r\n                  fontFamily: \"myFont\",\r\n                }}\r\n              >\r\n                <span style={{ color: \"#24aa24\", fontWeight: 700 }}>\r\n                  RECOVERED\r\n                </span>\r\n              </Typography>\r\n              <Typography\r\n                variant=\"h6\"\r\n                style={{\r\n                  fontWeight: 500,\r\n                  fontFamily: \"myFont\",\r\n                }}\r\n              >\r\n                <CountUp\r\n                  start={0}\r\n                  end={recovered}\r\n                  duration={2.5}\r\n                  separator=\",\"\r\n                />\r\n              </Typography>\r\n              <Typography\r\n                color=\"textSecondary\"\r\n                variant=\"caption\"\r\n                style={{\r\n                  fontWeight: 500,\r\n                  fontFamily: \"myFont\",\r\n                }}\r\n              >\r\n                {((recovered / cases) * 100).toFixed(2)}%\r\n              </Typography>\r\n              <Typography\r\n                color=\"textSecondary\"\r\n                style={{\r\n                  fontWeight: 500,\r\n                  fontFamily: \"myFont\",\r\n                  fontSize: 10,\r\n                }}\r\n              >\r\n                {new Date(updated).toDateString()}\r\n              </Typography>\r\n            </CardContent>\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            component={Card}\r\n            xs\r\n            md={3}\r\n            className={cx(styles.card, styles.deceased)}\r\n          >\r\n            <CardContent>\r\n              <Typography\r\n                color=\"secondary\"\r\n                gutterBottom\r\n                style={{ fontWeight: 700, fontFamily: \"myFont\" }}\r\n              >\r\n                DECEASED\r\n              </Typography>\r\n              <Typography\r\n                variant=\"h6\"\r\n                style={{\r\n                  fontWeight: 500,\r\n                  fontFamily: \"myFont\",\r\n                }}\r\n              >\r\n                <CountUp start={0} end={deaths} duration={2.5} separator=\",\" />\r\n              </Typography>\r\n              <Typography\r\n                variant=\"caption\"\r\n                color=\"textSecondary\"\r\n                style={{\r\n                  fontWeight: 500,\r\n                  fontFamily: \"myFont\",\r\n                }}\r\n              >\r\n                {todayDeaths ? \"+\" + todayDeaths : \"No Change\"}\r\n              </Typography>\r\n              <Typography\r\n                color=\"textSecondary\"\r\n                style={{\r\n                  fontWeight: 500,\r\n                  fontFamily: \"myFont\",\r\n                  fontSize: 10,\r\n                }}\r\n              >\r\n                {new Date(updated).toDateString()}\r\n              </Typography>\r\n            </CardContent>\r\n          </Grid>\r\n        </Grid>\r\n      </ThemeProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import React from \"react\";\r\nimport { Line, defaults } from \"react-chartjs-2\";\r\n\r\nimport styles from \"./Chart.module.css\";\r\n\r\nconst Charts = ({ data: { cases, recovered, deaths }, country }) => {\r\n  defaults.global.tooltips.intersect = false;\r\n  defaults.global.tooltips.mode = \"nearest\";\r\n  defaults.global.tooltips.position = \"average\";\r\n  defaults.global.tooltips.backgroundColor = \"rgba(255, 255, 255, 0.8)\";\r\n  defaults.global.tooltips.displayColors = false;\r\n  defaults.global.tooltips.borderColor = \"#c62828\";\r\n  defaults.global.tooltips.borderWidth = 1;\r\n  defaults.global.tooltips.titleFontColor = \"#000\";\r\n  defaults.global.tooltips.bodyFontColor = \"#000\";\r\n  defaults.global.tooltips.caretPadding = 4;\r\n  defaults.global.tooltips.intersect = false;\r\n  defaults.global.tooltips.mode = \"nearest\";\r\n  defaults.global.tooltips.position = \"nearest\";\r\n\r\n  defaults.global.legend.display = true;\r\n  defaults.global.legend.position = \"bottom\";\r\n\r\n  defaults.global.hover.intersect = false;\r\n\r\n  const chartOptions = {\r\n    animation: {\r\n      steps: 50,\r\n      scale: false,\r\n    },\r\n    responsive: true,\r\n    events: [\"click\", \"mousemove\", \"mouseout\", \"touchstart\", \"touchmove\"],\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n      mode: \"index\",\r\n    },\r\n    elements: {\r\n      point: {\r\n        radius: 0,\r\n      },\r\n      line: {\r\n        tension: 0,\r\n      },\r\n    },\r\n    layout: {\r\n      padding: {\r\n        left: 20,\r\n        right: 20,\r\n        top: 0,\r\n        bottom: 20,\r\n      },\r\n    },\r\n    title: {\r\n      display: true,\r\n      text: `Current state in ${country ? country : `the World`}`,\r\n    },\r\n    scales: {\r\n      yAxes: [\r\n        {\r\n          type: \"linear\",\r\n          ticks: {\r\n            callback: function (label, index, labels) {\r\n              return label / 1000 + \"K\";\r\n            },\r\n          },\r\n          scaleLabel: {\r\n            display: false,\r\n            labelString: \"1K = 1000\",\r\n          },\r\n        },\r\n      ],\r\n      xAxes: [\r\n        {\r\n          type: \"time\",\r\n          time: {\r\n            unit: \"day\",\r\n            tooltipFormat: \"MMM DD\",\r\n            stepSize: 7,\r\n            displayFormats: {\r\n              millisecond: \"MMM DD\",\r\n              second: \"MMM DD\",\r\n              minute: \"MMM DD\",\r\n              hour: \"MMM DD\",\r\n              day: \"MMM DD\",\r\n              week: \"MMM DD\",\r\n              month: \"MMM DD\",\r\n              quarter: \"MMM DD\",\r\n              year: \"MMM DD\",\r\n            },\r\n          },\r\n          gridLines: {\r\n            color: \"rgba(0, 0, 0, 0)\",\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  const months = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"Jun\",\r\n    \"Jul\",\r\n    \"Aug\",\r\n    \"Sep\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ];\r\n\r\n  const lineChart =\r\n    cases && recovered && deaths ? (\r\n      <React.Fragment>\r\n        <Line\r\n          data={{\r\n            labels: [\r\n              ...Object.keys(cases).map((item) => {\r\n                return `${new Date(item).getDate()} ${\r\n                  months[new Date(item).getMonth()]\r\n                }`;\r\n              }),\r\n            ],\r\n            datasets: [\r\n              {\r\n                data: Object.values(cases),\r\n                label: \"Infected\",\r\n                borderColor: \"#2186b4\",\r\n                backgroundColor: \"#d9ecf5\",\r\n                fill: true,\r\n              },\r\n              {\r\n                data: Object.values(recovered),\r\n                label: \"Recovered\",\r\n                borderColor: \"#24aa24\",\r\n                backgroundColor: \"#c3e0c3\",\r\n                fill: true,\r\n              },\r\n              {\r\n                data: Object.values(deaths),\r\n                label: \"Deceased\",\r\n                borderColor: \"red\",\r\n                backgroundColor: \"rgba(255, 0, 0, 0.5)\",\r\n                fill: true,\r\n              },\r\n            ],\r\n          }}\r\n          options={chartOptions}\r\n        />\r\n      </React.Fragment>\r\n    ) : null;\r\n\r\n  return (\r\n    <div className={`${styles.container} fadeInUp`}>\r\n      {lineChart}\r\n      <div className=\"w-100\"></div>\r\n      <h6 style={{ fontSize: 10 }}>\r\n        Quick Tip: Click on the legends to remove their plot.\r\n      </h6>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Charts;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport ReactGa from \"react-ga\";\r\nimport styles from \"./CountryPicker.module.css\";\r\nimport { countries } from \"../../API/index\";\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setFetchedCountries(await countries());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, [setFetchedCountries]);\r\n  if (fetchedCountries) {\r\n    return (\r\n      <FormControl\r\n        className={`${styles.formControl} fadeInUp`}\r\n        style={{ animationDelay: \"1s\" }}\r\n      >\r\n        <NativeSelect\r\n          defaultValue=\"\"\r\n          onChange={(e) => handleCountryChange(e.target.value)}\r\n          onClick={ReactGa.event({\r\n            category: \"Global options\",\r\n            action: \"Global options checked\",\r\n          })}\r\n        >\r\n          <option value=\"Global\">Global</option>\r\n          {fetchedCountries.map((item, i) => (\r\n            <option value={item.country} key={i}>\r\n              {item.country}\r\n            </option>\r\n          ))}\r\n        </NativeSelect>\r\n      </FormControl>\r\n    );\r\n  } else return null;\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React, { useState } from \"react\";\r\nimport { ComposableMap, Geographies, Geography } from \"react-simple-maps\";\r\nimport { scaleLog } from \"d3-scale\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport { commaSeperated } from \"../utils/common-functions\";\r\n\r\nconst WORLD_TOPO_JSON = require(\"../world-110m\");\r\n\r\nconst PROJECTION_CONFIG = {\r\n  scale: 33,\r\n};\r\n\r\nconst COLOR_RANGE = [\"#641304\", \"#b9381e\"];\r\n\r\nconst DEFAULT_COLOR = \"#ffffff\";\r\n\r\nconst geographyStyle = {\r\n  default: {\r\n    outline: \"#b13f2b\",\r\n  },\r\n  hover: {\r\n    fill: \"#e08878\",\r\n    transition: \"all 250ms\",\r\n    outline: \"#f13f2b\",\r\n  },\r\n  pressed: {\r\n    outline: \"#b13f2b\",\r\n  },\r\n};\r\n\r\nconst WorldChoropleth = ({ data: statesdata }) => {\r\n  const [tooltipContent, setTooltipContent] = useState(\"\");\r\n\r\n  const gradientData = {\r\n    fromColor: \"rgb(245, 245, 245)\",\r\n    toColor: \"rgb(100, 19, 4)\",\r\n    min: 0,\r\n    max:\r\n      String(\r\n        Math.ceil(\r\n          statesdata.reduce(\r\n            (max, item) => (item.value > max ? item.value : max),\r\n            0\r\n          ) / 100000\r\n        ) / 10\r\n      ) + \"M\",\r\n  };\r\n\r\n  const colorScale = scaleLog()\r\n    .domain(statesdata.map((d) => d.value))\r\n    .range(COLOR_RANGE);\r\n\r\n  const onMouseEnter = (geo, current = { value: \"0\" }) => {\r\n    return () => {\r\n      setTooltipContent(\r\n        `${geo.properties.NAME}: ${commaSeperated(\r\n          Number(current.value)\r\n        )} infected & ${commaSeperated(Number(current.active))} active`\r\n      );\r\n    };\r\n  };\r\n\r\n  const onMouseLeave = () => {\r\n    setTooltipContent(\"\");\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div>\r\n        <ReactTooltip>{tooltipContent}</ReactTooltip>\r\n\r\n        <ComposableMap\r\n          projectionConfig={PROJECTION_CONFIG}\r\n          projection=\"geoMercator\"\r\n          width={210}\r\n          height={210}\r\n          data-tip=\"\"\r\n        >\r\n          <Geographies geography={WORLD_TOPO_JSON}>\r\n            {({ geographies }) =>\r\n              geographies.map((geo) => {\r\n                const current = statesdata.find(\r\n                  (s) => s.id === geo.properties.ISO_A3\r\n                );\r\n                return (\r\n                  <Geography\r\n                    key={geo.rsmKey}\r\n                    geography={geo}\r\n                    fill={current ? colorScale(current.value) : DEFAULT_COLOR}\r\n                    style={geographyStyle}\r\n                    onMouseEnter={onMouseEnter(geo, current)}\r\n                    onMouseLeave={onMouseLeave}\r\n                    stroke={\"#e2808f\"}\r\n                    strokeWidth={0.15}\r\n                  />\r\n                );\r\n              })\r\n            }\r\n          </Geographies>\r\n        </ComposableMap>\r\n      </div>\r\n      <div className=\"worldLinearGradient\">\r\n        \r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default WorldChoropleth;\r\n","import React, { Component } from \"react\";\r\nimport WorldChoropleth from \"./worldchoropleth\";\r\nimport ReactGa from \"react-ga\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nclass World extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoaded1: false,\r\n      isLoaded2: false,\r\n      countiesTodayData: [],\r\n      countiesYesterdayData: [],\r\n      toggleToday: true,\r\n      toggleYesterday: false,\r\n    };\r\n    this.onToggleToday = this.onToggleToday.bind(this);\r\n    this.onToggleYesterday = this.onToggleYesterday.bind(this);\r\n  }\r\n\r\n  onToggleToday(toggleToday) {\r\n    this.setState({ toggleToday });\r\n  }\r\n  onToggleYesterday(toggleYesterday) {\r\n    this.setState({ toggleYesterday });\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\r\n      \"https://corona.lmao.ninja/v2/countries?yesterday=false&sort=cases\"\r\n    ).then((res) =>\r\n      res.json().then((json) => {\r\n        this.setState({\r\n          isLoaded1: true,\r\n          countiesTodayData: json,\r\n        });\r\n      })\r\n    );\r\n\r\n    fetch(\r\n      \"https://corona.lmao.ninja/v2/countries?yesterday=true&sort=cases\"\r\n    ).then((res) =>\r\n      res.json().then((json) => {\r\n        this.setState({\r\n          isLoaded2: true,\r\n          countiesYesterdayData: json,\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      isLoaded1,\r\n      countiesTodayData,\r\n      isLoaded2,\r\n      countiesYesterdayData,\r\n      toggleToday,\r\n      toggleYesterday,\r\n    } = this.state;\r\n\r\n    let countries = [];\r\n    let isLoaded = \"\";\r\n\r\n    if (toggleToday) {\r\n      countries = countiesTodayData;\r\n      isLoaded = isLoaded1;\r\n    }\r\n\r\n    if (toggleYesterday) {\r\n      countries = countiesYesterdayData;\r\n      isLoaded = isLoaded2;\r\n    }\r\n    const data = [];\r\n    countries.map((country) =>\r\n      data.push({\r\n        cases: Number(country.cases),\r\n        id: country.countryInfo.iso3,\r\n        deaths: Number(country.deaths),\r\n      })\r\n    );\r\n\r\n    const months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n\r\n    const cases = [];\r\n    countries.map((country) => cases.push(country.cases));\r\n    const totalCases = cases.reduce((a, b) => a + b, 0);\r\n\r\n    const newCases = [];\r\n    countries.map((country) => newCases.push(country.todayCases));\r\n    const totalNewCases = newCases.reduce((a, b) => a + b, 0);\r\n\r\n    const deaths = [];\r\n    countries.map((country) => deaths.push(country.deaths));\r\n    const totalDeaths = deaths.reduce((a, b) => a + b, 0);\r\n\r\n    const newDeaths = [];\r\n    countries.map((country) => newDeaths.push(country.todayDeaths));\r\n    const totalNewDeaths = newDeaths.reduce((a, b) => a + b, 0);\r\n\r\n    const recovered = [];\r\n    countries.map((country) => recovered.push(country.recovered));\r\n    const totalRecovered = recovered.reduce((a, b) => a + b, 0);\r\n\r\n    const active = [];\r\n    countries.map((country) => active.push(country.active));\r\n    const totalActive = active.reduce((a, b) => a + b, 0);\r\n\r\n    const critical = [];\r\n    countries.map((country) => critical.push(country.critical));\r\n    const totalCritical = critical.reduce((a, b) => a + b, 0);\r\n\r\n    const countriesdata = [];\r\n    countries.map((item) =>\r\n      countriesdata.push({\r\n        id: item.countryInfo.iso3,\r\n        state: item.country,\r\n        value: item.cases,\r\n        active: item.active,\r\n      })\r\n    );\r\n\r\n    if (isLoaded) {\r\n      return (\r\n        <React.Fragment>\r\n          <div className=\"containerWorld\">\r\n            <Helmet>\r\n              <title>GLOBAL COVID 19 UPDATE</title>\r\n            </Helmet>\r\n            <div\r\n              className=\"col fadeInUp worldchoropleth\"\r\n              style={{ alignContent: \"center\" }}\r\n            >\r\n              <WorldChoropleth\r\n                data={countriesdata}\r\n                onMouseEnter={ReactGa.event({\r\n                  category: \"World map\",\r\n                  action: \"World map clicked\",\r\n                })}\r\n              />\r\n            </div>\r\n            </div>\r\n        </React.Fragment>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"containerHome\">\r\n          <div\r\n            className=\"spinner-grow\"\r\n            role=\"status\"\r\n            style={{ alignContent: \"center\" }}\r\n          >\r\n            <span className=\"sr-only\">Loading...</span>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default World;\r\n","import React, { Component } from \"react\";\r\nimport { Cards, Chart, CountryPicker } from \"./TEST/index\";\r\nimport { fetchTotal, fetchDailyData, fetchChAusCan } from \"./API/index\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport styles from \"./Test.module.css\";\r\nimport World from './world';\r\n\r\nclass Test extends Component {\r\n  state = {\r\n    data: {},\r\n    data2: {},\r\n    country: \"\",\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchTotal();\r\n    this.setState({ data: fetchedData });\r\n    const fetchedDailydata = await fetchDailyData();\r\n    this.setState({ data2: fetchedDailydata });\r\n  }\r\n\r\n  handleCountryChange = async (country) => {\r\n    if (country === \"Global\") {\r\n      const fetchedData = await fetchTotal();\r\n      this.setState({ data: fetchedData });\r\n      const fetchedDailydata = await fetchDailyData();\r\n      this.setState({ data2: fetchedDailydata });\r\n    }\r\n    if (\r\n      country !== \"Global\" &&\r\n      \"Holy See (Vatican City State)\" &&\r\n      \"Côte d'Ivoire\" &&\r\n      \"Curaçao\" &&\r\n      \"Lao People's Democratic Republic\" &&\r\n      \"China\" &&\r\n      \"Australia\" &&\r\n      \"Canada\"\r\n    ) {\r\n      const fetchedData = await fetchTotal(country);\r\n      this.setState({ data: fetchedData, country: country });\r\n\r\n      const fetchedDailydata = await fetchDailyData(country);\r\n\r\n      let cases = {};\r\n      let recovered = {};\r\n      let deaths = {};\r\n      let dataProvince = {};\r\n\r\n      fetchedDailydata.data.map((item) => {\r\n        if (country.toLowerCase() === item.province) {\r\n          cases = item.timeline.cases;\r\n          recovered = item.timeline.recovered;\r\n          deaths = item.timeline.deaths;\r\n\r\n          dataProvince = { cases, recovered, deaths };\r\n          console.log({ cases, recovered, deaths });\r\n          this.setState({ data2: dataProvince });\r\n        } else if (country === item.country && item.province === null) {\r\n          cases = item.timeline.cases;\r\n          recovered = item.timeline.recovered;\r\n          deaths = item.timeline.deaths;\r\n          console.log({ cases, recovered, deaths });\r\n          this.setState({ cases, recovered, deaths });\r\n        }\r\n      });\r\n    }\r\n\r\n    if (country === \"Holy See (Vatican City State)\") {\r\n      const fetchedData = await fetchTotal(country);\r\n      this.setState({ data: fetchedData, country: country });\r\n\r\n      const fetchedDailydata = await fetchDailyData(country);\r\n      let cases = {};\r\n      let recovered = {};\r\n      let deaths = {};\r\n      fetchedDailydata.data.map((item) => {\r\n        if (item.country === \"Holy See\") {\r\n          cases = item.timeline.cases;\r\n          recovered = item.timeline.recovered;\r\n          deaths = item.timeline.deaths;\r\n        }\r\n      });\r\n      this.setState({ data2: { cases, recovered, deaths } });\r\n    }\r\n\r\n    if (country === \"Côte d'Ivoire\") {\r\n      const fetchedData = await fetchTotal(country);\r\n      this.setState({ data: fetchedData, country: country });\r\n\r\n      const fetchedDailydata = await fetchDailyData(country);\r\n      let cases = {};\r\n      let recovered = {};\r\n      let deaths = {};\r\n      fetchedDailydata.data.map((item) => {\r\n        if (item.country === \"Cote d'Ivoire\") {\r\n          cases = item.timeline.cases;\r\n          recovered = item.timeline.recovered;\r\n          deaths = item.timeline.deaths;\r\n        }\r\n      });\r\n      this.setState({ data2: { cases, recovered, deaths } });\r\n    }\r\n\r\n    if (country === \"Curaçao\") {\r\n      const fetchedData = await fetchTotal(country);\r\n      this.setState({ data: fetchedData, country: country });\r\n\r\n      const fetchedDailydata = await fetchDailyData(country);\r\n      let cases = {};\r\n      let recovered = {};\r\n      let deaths = {};\r\n      fetchedDailydata.data.map((item) => {\r\n        if (item.province === \"curacao\") {\r\n          cases = item.timeline.cases;\r\n          recovered = item.timeline.recovered;\r\n          deaths = item.timeline.deaths;\r\n        }\r\n      });\r\n      this.setState({ data2: { cases, recovered, deaths } });\r\n    }\r\n\r\n    if (country === \"Lao People's Democratic Republic\") {\r\n      const fetchedData = await fetchTotal(country);\r\n      this.setState({ data: fetchedData, country: country });\r\n\r\n      const fetchedDailydata = await fetchDailyData(country);\r\n      let cases = {};\r\n      let recovered = {};\r\n      let deaths = {};\r\n      fetchedDailydata.data.map((item) => {\r\n        if (item.country === `Lao People\"s Democratic Republic`) {\r\n          cases = item.timeline.cases;\r\n          recovered = item.timeline.recovered;\r\n          deaths = item.timeline.deaths;\r\n        }\r\n      });\r\n      this.setState({ data2: { cases, recovered, deaths } });\r\n    }\r\n\r\n    if (country === \"Réunion\") {\r\n      const fetchedData = await fetchTotal(country);\r\n      this.setState({ data: fetchedData, country: country });\r\n\r\n      const fetchedDailydata = await fetchDailyData(country);\r\n      let cases = {};\r\n      let recovered = {};\r\n      let deaths = {};\r\n      fetchedDailydata.data.map((item) => {\r\n        if (item.province === \"reunion\") {\r\n          cases = item.timeline.cases;\r\n          recovered = item.timeline.recovered;\r\n          deaths = item.timeline.deaths;\r\n        }\r\n      });\r\n      this.setState({ data2: { cases, recovered, deaths } });\r\n    }\r\n\r\n    if (country === \"St. Barth\") {\r\n      const fetchedData = await fetchTotal(country);\r\n      this.setState({ data: fetchedData, country: country });\r\n\r\n      const fetchedDailydata = await fetchDailyData(country);\r\n      let cases = {};\r\n      let recovered = {};\r\n      let deaths = {};\r\n      fetchedDailydata.data.map((item) => {\r\n        if (item.province === `saint barthelemy`) {\r\n          cases = item.timeline.cases;\r\n          recovered = item.timeline.recovered;\r\n          deaths = item.timeline.deaths;\r\n        }\r\n      });\r\n      this.setState({ data2: { cases, recovered, deaths } });\r\n    }\r\n\r\n    if (country === \"China\" || \"Australia\" || \"Canada\") {\r\n      const fetchedDailydata = await fetchChAusCan(country);\r\n\r\n      this.setState({ data2: fetchedDailydata });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { data, data2, country } = this.state;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className={styles.container}>\r\n          <Helmet>\r\n            <title>GLOBAL</title>\r\n            <meta\r\n              name=\"description\"\r\n              content=\"Track the spread of Coronavirus (COVID-19) in the World\"\r\n            />\r\n          </Helmet>\r\n          <Cards data={data} />\r\n          <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n          <Chart data={data2} country={country} />\r\n          <World/>\r\n        </div>\r\n        \r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Test;\r\n"],"sourceRoot":""}