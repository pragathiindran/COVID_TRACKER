{"version":3,"sources":["utils/common-functions.js","components/drawer.jsx","components/navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["stateFullName","commaSeperated","x","undefined","lastThree","toString","substring","length","otherNumbers","replace","timeSince","timeStamp","now","Date","secondsPast","getTime","parseInt","getDate","toDateString","match","getFullYear","DeltaArrow","deltaType","color","Number","style","verticalAlign","size","strokeWidth","DeltaValue","Math","abs","useStyles","makeStyles","list","width","backgroundColor","fullList","SwipeableTemporaryDrawer","classes","React","useState","left","state","setState","toggleDrawer","anchor","open","event","type","key","map","Fragment","className","onClick","fontSize","SwipeableDrawer","onClose","onOpen","clsx","role","onKeyDown","List","background","ListItem","button","ListItemIcon","ListItemText","primary","Divider","to","alignContent","justifyContent","textAlign","Navbar","props","changeTitle","newTitle","title","hasOwnProperty","window","location","pathname","toUpperCase","this","history","listen","flex","id","Component","withRouter","Home","lazy","WHOGuidelinesPage","NewsPage","NotFound","Test","schemaMarkup","name","alternateName","url","App","require","createBrowserHistory","useEffect","ReactGa","initialize","pageview","search","Helmet","JSON","stringify","fallback","path","component","exact","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c9b868b4.chunk.js","sourcesContent":["import * as Icon from \"react-feather\";\r\nimport React from \"react\";\r\n\r\nconst months = {\r\n  \"01\": \"Jan\",\r\n  \"02\": \"Feb\",\r\n  \"03\": \"Mar\",\r\n  \"04\": \"Apr\",\r\n  \"05\": \"May\",\r\n  \"06\": \"Jun\",\r\n  \"07\": \"Jul\",\r\n  \"08\": \"Aug\",\r\n  \"09\": \"Sep\",\r\n  \"10\": \"Oct\",\r\n  \"11\": \"Nov\",\r\n  \"12\": \"Dec\",\r\n};\r\n\r\nexport const stateFullName = {\r\n  \"/\": \"COVID INDIA STATS\",\r\n  \"/INDEPTH\": \"INDEPTH\",\r\n  \"/GLOBAL\": \"Global PLOTS\",\r\n  \"/DIVE\": \"COVID GLOBAL STATS\",\r\n  \"/LINKS\": \"Helpful links\",\r\n  \"/FAQ\": \"faqs\",\r\n  \"/NOTIFICATIONS\": \"notifications\",\r\n  \"/AP\": \"COVID INDIA STATS\",\r\n  \"/AN\": \"COVID INDIA STATS\",\r\n  \"/AR\": \"COVID INDIA STATS\",\r\n  \"/AS\": \"COVID INDIA STATS\",\r\n  \"/BR\": \"COVID INDIA STATS\",\r\n  \"/CH\": \"COVID INDIA STATS\",\r\n  \"/CT\": \"COVID INDIA STATS\",\r\n  \"/DN\": \"COVID INDIA STATS\",\r\n  \"/DL\": \"COVID INDIA STATS\",\r\n  \"/GA\": \"COVID INDIA STATS\",\r\n  \"/GJ\": \"COVID INDIA STATS\",\r\n  \"/HP\": \"COVID INDIA STATS\",\r\n  \"/HR\": \"COVID INDIA STATS\",\r\n  \"/JH\": \"COVID INDIA STATS\",\r\n  \"/JK\": \"COVID INDIA STATS\",\r\n  \"/KA\": \"COVID INDIA STATS\",\r\n  \"/KL\": \"COVID INDIA STATS\",\r\n  \"/LA\": \"COVID INDIA STATS\",\r\n  \"/LD\": \"COVID INDIA STATS\",\r\n  \"/MH\": \"COVID INDIA STATS\",\r\n  \"/ML\": \"COVID INDIA STATS\",\r\n  \"/MN\": \"COVID INDIA STATS\",\r\n  \"/MP\": \"COVID INDIA STATS\",\r\n  \"/MZ\": \"COVID INDIA STATS\",\r\n  \"/NL\": \"COVID INDIA STATS\",\r\n  \"/OR\": \"COVID INDIA STATS\",\r\n  \"/PB\": \"COVID INDIA STATS\",\r\n  \"/PY\": \"COVID INDIA STATS\",\r\n  \"/RJ\": \"COVID INDIA STATS\",\r\n  \"/SK\": \"COVID INDIA STATS\",\r\n  \"/TG\": \"COVID INDIA STATS\",\r\n  \"/TN\": \"COVID INDIA STATS\",\r\n  \"/TR\": \"COVID INDIA STATS\",\r\n  \"/UP\": \"COVID INDIA STATS\",\r\n  \"/UT\": \"COVID INDIA STATS\",\r\n  \"/WB\": \"COVID INDIA STATS\",\r\n  \"/UN\": \"COVID INDIA STATS\",\r\n};\r\n\r\nexport const formatDate = (unformattedDate) => {\r\n  const day = unformattedDate.slice(0, 2);\r\n  const month = unformattedDate.slice(3, 5);\r\n  const year = unformattedDate.slice(6, 10);\r\n  const time = unformattedDate.slice(11);\r\n  return `${year}-${month}-${day}T${time}+05:30`;\r\n};\r\n\r\nexport const formatDateAbsolute = (unformattedDate) => {\r\n  const day = unformattedDate.slice(0, 2);\r\n  const month = unformattedDate.slice(3, 5);\r\n  const time = unformattedDate.slice(11);\r\n  return `${day} ${months[month]}, ${time.slice(0, 5)} IST`;\r\n};\r\n\r\nexport function commaSeperated(x) {\r\n  if (x !== undefined) {\r\n    x = x.toString();\r\n    let lastThree = x.substring(x.length - 3);\r\n    let otherNumbers = x.substring(0, x.length - 3);\r\n    if (otherNumbers !== \"\") lastThree = \",\" + lastThree;\r\n    let res = otherNumbers.replace(/\\B(?=(\\d{2})+(?!\\d))/g, \",\") + lastThree;\r\n    return res;\r\n  } else return 0;\r\n}\r\n\r\nexport function toTimestamp(strDate) {\r\n  var datum = Date.parse(strDate);\r\n  return datum / 1000;\r\n}\r\n\r\nexport function timeSince(timeStamp) {\r\n  var now = new Date(),\r\n    secondsPast = (now.getTime() - timeStamp) / 1000;\r\n\r\n  if (secondsPast < 60) {\r\n    return (\r\n      parseInt(secondsPast) +\r\n      ` second${parseInt(secondsPast) > 1 ? \"s\" : \"\"} ago`\r\n    );\r\n  }\r\n\r\n  if (secondsPast < 3600) {\r\n    return (\r\n      parseInt(secondsPast / 60) +\r\n      ` minute${parseInt(secondsPast / 60) > 1 ? \"s\" : \"\"} ago`\r\n    );\r\n  }\r\n\r\n  if (secondsPast <= 86400) {\r\n    return (\r\n      parseInt(secondsPast / 3600) +\r\n      ` hour${parseInt(secondsPast / 3600) > 1 ? \"s\" : \"\"} ago `\r\n    );\r\n  }\r\n  if (secondsPast > 86400) {\r\n    let day = timeStamp.getDate();\r\n    var month = timeStamp\r\n      .toDateString()\r\n      .match(/ [a-zA-Z]*/)[0]\r\n      .replace(\" \", \"\");\r\n    var year =\r\n      timeStamp.getFullYear() === now.getFullYear()\r\n        ? \"\"\r\n        : \" \" + timeStamp.getFullYear();\r\n    return day + \" \" + month + year;\r\n  }\r\n}\r\n\r\nexport function DeltaArrow({ deltaType, color }) {\r\n  return Number(deltaType) > 0 ? (\r\n    <Icon.ArrowUp\r\n      style={{ verticalAlign: -1 }}\r\n      color={color}\r\n      size={10}\r\n      strokeWidth={3.5}\r\n    />\r\n  ) : Number(deltaType) < 0 ? (\r\n    <Icon.ArrowDown\r\n      style={{ verticalAlign: -1 }}\r\n      color={color}\r\n      size={10}\r\n      strokeWidth={3.5}\r\n    />\r\n  ) : (\r\n    \"\"\r\n  );\r\n}\r\n\r\nexport function DeltaValue({ deltaType }) {\r\n  return Number(deltaType) > 0\r\n    ? commaSeperated(Number(deltaType))\r\n    : Number(deltaType) < 0\r\n    ? commaSeperated(Number(Math.abs(deltaType)))\r\n    : \"\";\r\n}\r\n\r\nexport const stateID = [\r\n  \"AP\",\r\n  \"AN\",\r\n  \"AR\",\r\n  \"AS\",\r\n  \"BR\",\r\n  \"CH\",\r\n  \"CT\",\r\n  \"DN\",\r\n  \"DL\",\r\n  \"GA\",\r\n  \"GJ\",\r\n  \"HP\",\r\n  \"HR\",\r\n  \"JH\",\r\n  \"JK\",\r\n  \"KA\",\r\n  \"KL\",\r\n  \"LA\",\r\n  \"LD\",\r\n  \"MH\",\r\n  \"ML\",\r\n  \"MN\",\r\n  \"MP\",\r\n  \"MZ\",\r\n  \"NL\",\r\n  \"OR\",\r\n  \"PB\",\r\n  \"PY\",\r\n  \"RJ\",\r\n  \"SK\",\r\n  \"TG\",\r\n  \"TN\",\r\n  \"TR\",\r\n  \"UP\",\r\n  \"UT\",\r\n  \"WB\",\r\n  \"UN\",\r\n];\r\n","import React from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport HomeRoundedIcon from \"@material-ui/icons/HomeRounded\";\r\nimport MenuRoundedIcon from \"@material-ui/icons/MenuRounded\";\r\nimport PublicRoundedIcon from \"@material-ui/icons/PublicRounded\";\r\nimport ForumRoundedIcon from \"@material-ui/icons/ForumRounded\";\r\nimport CheckIcon from '@material-ui/icons/Check';\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 260,\r\n    backgroundColor: '#9FA8DA' \r\n  },\r\n  fullList: {\r\n    width: \"auto\",\r\n  },\r\n});\r\n\r\nexport default function SwipeableTemporaryDrawer() {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useState({\r\n    left: false,\r\n  });\r\n\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    if (\r\n      event &&\r\n      event.type === \"keydown\" &&\r\n      (event.key === \"Tab\" || event.key === \"Shift\")\r\n    ) {\r\n      return;\r\n    }\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n\r\n  const list = (anchor) => (\r\n    <div\r\n      className={clsx(classes.list, {\r\n        [classes.fullList]: anchor === \"top\" || anchor === \"bottom\",\r\n      })}\r\n      role=\"presentation\"\r\n      onClick={toggleDrawer(anchor, false)}\r\n      onKeyDown={toggleDrawer(anchor, false)}\r\n    >\r\n      <List style={{ background: \"#ffff\" }}>\r\n        <br />\r\n        <br />\r\n        <ListItem button key={\"covid-tracker\"}>\r\n          <ListItemIcon>\r\n           \r\n          </ListItemIcon>\r\n          <ListItemText primary={\"COVID TRACKER\"} />\r\n        </ListItem>\r\n        <br />\r\n        <br />\r\n        <Divider />\r\n        <NavLink to=\"/\" className=\"sideBarItem\">\r\n          <ListItem button key={\"Home\"}>\r\n            <ListItemIcon>{<HomeRoundedIcon fontSize=\"large\" />}</ListItemIcon>\r\n            <ListItemText primary={\"Home\"} />\r\n          </ListItem>\r\n        </NavLink>\r\n        \r\n        <NavLink to=\"/global\" className=\"sideBarItem\">\r\n          <ListItem button key={\"Global\"}>\r\n            <ListItemIcon>\r\n              {<PublicRoundedIcon fontSize=\"large\" />}\r\n            </ListItemIcon>\r\n            <ListItemText primary={\"Global\"} />\r\n          </ListItem>\r\n        </NavLink>\r\n        <NavLink to=\"/WHOGuidelinesPage\" className=\"sideBarItem\">\r\n          <ListItem button key={\"WHOGuidelinesPage\"}>\r\n            <ListItemIcon>{<CheckIcon fontSize=\"large\" />}</ListItemIcon>\r\n            <ListItemText primary={\"WHO Guidelines\"} />\r\n          </ListItem>\r\n        </NavLink>\r\n        \r\n        <NavLink to=\"/NewsPage\" className=\"sideBarItem\">\r\n          <ListItem button key={\"NewsPage\"}>\r\n            <ListItemIcon>{<ForumRoundedIcon fontSize=\"large\" />}</ListItemIcon>\r\n            <ListItemText primary={\"News\"} />\r\n          </ListItem>\r\n        </NavLink>\r\n\r\n        \r\n        <br />\r\n        <h6\r\n          style={{\r\n            alignContent: \"center\",\r\n            justifyContent: \"center\",\r\n            textAlign: \"center\",\r\n          }}\r\n        >\r\n\r\n        </h6>\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {[\"left\"].map((anchor) => (\r\n        <React.Fragment key={anchor}>\r\n          <span className=\"menuIcon\" onClick={toggleDrawer(anchor, true)}>\r\n            {\r\n              <MenuRoundedIcon\r\n                style={{ verticalAlign: \"-0.65rem\" }}\r\n                fontSize=\"large\"\r\n              />\r\n            }\r\n          </span>\r\n          <SwipeableDrawer\r\n            anchor={anchor}\r\n            open={state[anchor]}\r\n            onClose={toggleDrawer(anchor, false)}\r\n            onOpen={toggleDrawer(anchor, true)}\r\n          >\r\n            {list(anchor)}\r\n          </SwipeableDrawer>\r\n        </React.Fragment>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\nimport SwipeableTemporaryDrawer from \"./drawer\";\r\nimport { stateFullName } from \"./../utils/common-functions\";\r\n\r\nclass Navbar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: stateFullName.hasOwnProperty(\r\n        window.location.pathname.toUpperCase()\r\n      )\r\n        ? stateFullName[window.location.pathname.toUpperCase()].toUpperCase()\r\n        : \"COVID TRACKER\".toUpperCase(),\r\n    };\r\n  }\r\n\r\n  changeTitle = (newTitle) => {\r\n    this.setState({\r\n      title: newTitle,\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.history.listen(() => {\r\n      {\r\n        stateFullName.hasOwnProperty(window.location.pathname.toUpperCase())\r\n          ? this.changeTitle(\r\n              stateFullName[\r\n                window.location.pathname.toUpperCase()\r\n              ].toUpperCase()\r\n            )\r\n          : this.changeTitle(\"COVID TRACKER\");\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <nav className=\"myNavbar\">\r\n        <ul className=\"myNavbar-nav\">\r\n          <SwipeableTemporaryDrawer />\r\n          <ul style={{ flex: 0.54 }} id=\"line1\"></ul>\r\n          <NavLink to=\"/\" className=\"fadeInLeft\">\r\n            <div>\r\n              <span className=\"title\">{this.state.title}</span>\r\n            </div>\r\n          </NavLink>\r\n          <ul style={{ flex: 0.46 }}></ul>\r\n          <ul style={{ flex: 0.54 }} id=\"line2\"></ul>\r\n           </ul>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Navbar);\r\n","import React, { useEffect, Suspense, lazy } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport ReactGa from \"react-ga\";\r\nimport Navbar from \"./components/navbar\";\r\n\r\nconst Home = lazy(() => import(\"./components/home\"));\r\nconst WHOGuidelinesPage = lazy(() => import(\"./components/WHOGuidelinesPage\"));\r\nconst NewsPage = lazy(() => import(\"./components/NewsPage\"));\r\nconst NotFound = lazy(() => import(\"./components/notFound\"));\r\nconst Test = lazy(() => import(\"./components/test\"));\r\n\r\nconst schemaMarkup = {\r\n  \"@context\": \"http://schema.org/\",\r\n  \"@type\": \"NGO\",\r\n  name:\r\n    \"Track the spread of Coronavirus (COVID-19) in India from state level to district level and around the world\",\r\n  alternateName: \"COVID TRACKER\",\r\n  url: \"https://covid-tracker.com/\",\r\n};\r\n\r\nfunction App() {\r\n  const history = require(\"history\").createBrowserHistory;\r\n\r\n  useEffect(() => {\r\n    ReactGa.initialize(\"UA-163288419-1\");\r\n    ReactGa.pageview(window.location.pathname + window.location.search);\r\n  }, []);\r\n  return (\r\n    <React.Fragment>\r\n      <Helmet>\r\n        <script type=\"application/ld+json\">\r\n          {JSON.stringify(schemaMarkup)}\r\n        </script>\r\n      </Helmet>\r\n      <Router history={history}>\r\n        <Navbar />\r\n        <Suspense fallback={<div className=\"lazy\"></div>}>\r\n          <main className=\"container\">\r\n            <Switch>\r\n              <Route path=\"/global\" component={Test} />\r\n              <Route path=\"/NewsPage\" component={NewsPage} />\r\n              <Route path=\"/not-found\" component={NotFound} />\r\n              <Route path=\"/WHOGuidelinesPage\" component={WHOGuidelinesPage} />\r\n              <Route exact path=\"/\" component={Home} />\r\n              <Redirect to=\"/not-found\" />\r\n            </Switch>\r\n          </main>\r\n        </Suspense>\r\n      </Router>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { Suspense } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"font-awesome/css/font-awesome.css\";\r\n\r\nReactDOM.render(\r\n  <Suspense fallback={\"\"}>\r\n    <App />\r\n  </Suspense>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}